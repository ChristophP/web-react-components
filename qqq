[1mdiff --git a/src/index.js b/src/index.js[m
[1mindex fb2784f..1c67cd4 100644[m
[1m--- a/src/index.js[m
[1m+++ b/src/index.js[m
[36m@@ -49,11 +49,10 @@[m [mconst mapToPropertyDescriptor = ([m
   typeOrSerDes,[m
   onAfterSet = Function.prototype,[m
 ) => {[m
[32m+[m[32m  // handlers[m
   if (typeOrSerDes === Types.event) {[m
[31m-    let eventHandler;[m
[31m-[m
     return {[m
[31m-      get: function() {[m
[32m+[m[32m      get() {[m
         // return event handler assigned via propery if available[m
         if (typeof eventHandler !== 'undefined') return eventHandler;[m
 [m
[36m@@ -68,17 +67,20 @@[m [mconst mapToPropertyDescriptor = ([m
           return null;[m
         };[m
       },[m
[31m-      set: function(value) {[m
[31m-        eventHandler = (typeof value === 'function') ? value : null;[m
[32m+[m[32m      set(value) {[m
[32m+[m[32m        this[name] = (typeof value === 'function') ? value : null;[m
         onAfterSet(this);[m
       }[m
     };[m
[31m-  } else if (typeOrSerDes === Types.bool) {[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // booleans[m
[32m+[m[32m  if (typeOrSerDes === Types.bool) {[m
     return {[m
[31m-      get: function() {[m
[32m+[m[32m      get() {[m
         return this.hasAttribute(name);[m
       },[m
[31m-      set: function(value) {[m
[32m+[m[32m      set(value) {[m
         if (value) {[m
           this.setAttribute(name, '');[m
         } else {[m
[36m@@ -87,37 +89,38 @@[m [mconst mapToPropertyDescriptor = ([m
         onAfterSet(this);[m
       }[m
     };[m
[31m-  } else {[m
[31m-    return {[m
[31m-      get: function() {[m
[31m-        const value = this.getAttribute(name);[m
[32m+[m[32m  }[m
 [m
[31m-        if (typeOrSerDes === Types.number) {[m
[31m-          return Number(value);[m
[31m-        } else if (typeOrSerDes === Types.json) {[m
[31m-          return JSON.parse(value);[m
[31m-        }[m
[32m+[m[32m  // string, numbers, json[m
[32m+[m[32m  return {[m
[32m+[m[32m    get() {[m
[32m+[m[32m      const value = this.getAttribute(name);[m
 [m
[31m-        return (typeof typeOrSerDes.deserialize === 'function')[m
[31m-          ? typeOrSerDes.deserialize(value)[m
[31m-          : value;[m
[31m-      },[m
[31m-      set: function(value) {[m
[31m-        const attributeValue = (() => {[m
[31m-          if (typeOrSerDes === Types.json) {[m
[31m-            return JSON.stringify(value);[m
[31m-          }[m
[31m-[m
[31m-          return (typeof typeOrSerDes.serialize === 'function')[m
[31m-            ? typeOrSerDes.serialize(value)[m
[31m-            : value.toString();[m
[31m-        })();[m
[31m-[m
[31m-        this.setAttribute(name, attributeValue);[m
[31m-        onAfterSet(this);[m
[32m+[m[32m      if (typeOrSerDes === Types.number) {[m
[32m+[m[32m        return Number(value);[m
[32m+[m[32m      } else if (typeOrSerDes === Types.json) {[m
[32m+[m[32m        return JSON.parse(value);[m
       }[m
[31m-    };[m
[31m-  }[m
[32m+[m
[32m+[m[32m      return (typeof typeOrSerDes.deserialize === 'function')[m
[32m+[m[32m        ? typeOrSerDes.deserialize(value)[m
[32m+[m[32m        : value;[m
[32m+[m[32m    },[m
[32m+[m[32m    set(value) {[m
[32m+[m[32m      const attributeValue = (() => {[m
[32m+[m[32m        if (typeOrSerDes === Types.json) {[m
[32m+[m[32m          return JSON.stringify(value);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return (typeof typeOrSerDes.serialize === 'function')[m
[32m+[m[32m          ? typeOrSerDes.serialize(value)[m
[32m+[m[32m          : value.toString();[m
[32m+[m[32m      })();[m
[32m+[m
[32m+[m[32m      this.setAttribute(name, attributeValue);[m
[32m+[m[32m      onAfterSet(this);[m
[32m+[m[32m    }[m
[32m+[m[32m  };[m
 };[m
 [m
 const definePropertiesFor = (WebComponent, mapping, onAfterSet) => {[m
